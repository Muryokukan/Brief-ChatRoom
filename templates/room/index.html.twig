{% extends 'base.html.twig' %}

{% block title %}{{ roomName }}#{{ roomId }}{% endblock %}

{% block body %}
{# Wrapper #}
<div class="flex flex-col w-screen h-screen bg-slate-800 text-white">

    {# Chat Section #}
    <div id="chatLog" class="flex-1 overflow-y-auto p-8">
        {# Message #}
        {% for message in messages %}
        {{ include('room/chatMessage.html.twig', {'userid': message.getUser().getId(), 'nick': message.getUser().getNickname(), 'messcontent': message.getContent()}) }}
        {% endfor %}
    </div>

    {# Interaction Section #}
    <div class="bg-slate-700 border-t border-slate-800">
        
        {# Buttons Row #}
        <div class="flex justify-evenly p-6 bg-slate-600">
            <button id="btnRecap" class="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md">Récapituler</button>
            <button id="btnIdea" class="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md">Générer une idée</button>
            <button class="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md">Button 3</button>
            <button class="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md">Button 4</button>
        </div>
        
        {# Chat Input Section #}
        <div class="flex items-center bg-slate-600 px-6 py-4">
            {# <form action="{{ path('room_publish', {'roomId': roomId}) }}" method="POST"> #}
                <input
                    type="text"
                    id="content"
                    placeholder="Écrire ici..."
                    class="flex-1 bg-slate-500 text-white placeholder-slate-400 py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <button id="sendButton" class="ml-4 bg-blue-600 hover:bg-blue-700 text-white py-2 px-6 rounded-md">Envoyer</button>
            {# </form> #}
        </div>
    </div>

</div>

{% endblock %}
{% block javascripts %}

<script>
async function groqRecap() {
    try {
        // Fetch the rendered Twig HTML
        const response = await fetch(`{{path('groq_recap')}}?chatroom={{roomId}}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        responsejson = await response.json();

        renderMessage(1, responsejson.answer);
    } catch (error) {
        console.error('Error rendering message:', error);
    }
}

async function groqIdea() {
    try {
        // Fetch the rendered Twig HTML
        const response = await fetch(`{{path('groq_idea')}}?chatroom={{roomId}}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        responsejson = await response.json();

        renderMessage(1, responsejson.answer);
    } catch (error) {
        console.error('Error rendering message:', error);
    }
}

// Listener
const eventSource = new EventSource("{{ mercure('room/' ~ roomId)|escape('js') }}");
eventSource.onmessage = event => {
    // Will be called every time an update is published by the server
    console.log(JSON.parse(event.data));
    message = JSON.parse(event.data);

    renderMessage(message.user, message.content);
}

async function renderMessage(userid, content) {
    try {
        // Fetch the rendered Twig HTML
        const response = await fetch(`{{path('render_message')}}?userid=${encodeURIComponent(userid)}&content=${encodeURIComponent(content)}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        
        const data = await response.text();

        // Append the rendered HTML to the chat container
        const chatContainer = document.getElementById('chatLog');
        chatContainer.innerHTML += data;
        
        chatContainer.scrollTop = chatLog.scrollHeight;
    } catch (error) {
        console.error('Error rendering message:', error);
    }
}

function sendMessage () {
    const text = document.getElementById('content').value;
    const endpoint = "{{ path('room_publish', {'roomId': roomId}) }}";

    if (text != '') {
        document.getElementById('content').value = "";

        fetch(endpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 'content': text }),
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error('Failed to send message');
            })
            .catch(error => {
                throw new Error('Error: ' + error.message);
            });
    }
}

// Button Click
document.addEventListener('DOMContentLoaded', () => {
    const textBox = document.getElementById('content');
    const sendButton = document.getElementById('sendButton');
    document.getElementById("btnRecap").addEventListener('click', groqRecap);
    document.getElementById("btnIdea").addEventListener('click', groqIdea);

    if (sendButton) {
        sendButton.addEventListener('click', sendMessage);
    }

    if (textBox) {
        textBox.addEventListener("keydown",function(e){
            if(e.keyCode == 13){
                sendMessage();
            } 
        });
    }
});

</script>

{% endblock %}